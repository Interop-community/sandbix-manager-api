# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image: hspconsortium/hspc-ubuntu-base
clone:           # the 'clone' section
  depth: 1       # the depth, in this case the clone will contain last one commits

pipelines:
  default:
    - step:
        script:
          - echo "Please use a GitFlow branch"
          - exit 1;
  branches:
    develop:
      - step:
          name: build the source code
          caches:
            - maven
          script:
            - mvn -V -B -s settings.xml deploy -P DEPLOY-HSPC,hspc-nexus
            - rm target/*-sources.jar
            - rm target/*-javadoc.jar
          artifacts:
            - target/*.jar
      - step:
          name: build docker and upload to docker hub
          script:
            - export DOCKER_PROJECT_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            - echo $DOCKER_PROJECT_VERSION
            - export DOCKER_IMAGE_COORDINATES="hspconsortium/sandbox-manager-api:${DOCKER_PROJECT_VERSION}"
            - echo $DOCKER_IMAGE_COORDINATES
            - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
            - docker build -t $DOCKER_IMAGE_COORDINATES .
            - docker push $DOCKER_IMAGE_COORDINATES
      - step:
          name: update the aws task definition
          script:
            - export TEMPLATE_FILE="aws/task-definition-test.json"
            - export DOCKER_PROJECT_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            - export DOCKER_IMAGE_COORDINATES="hspconsortium/sandbox-manager-api:${DOCKER_PROJECT_VERSION}"
            - jq ".containerDefinitions[0].image = \"$DOCKER_IMAGE_COORDINATES\"" ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - jq '.containerDefinitions[0].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_TEST'"}]' ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - jq '.containerDefinitions[0].environment += [{"name":"SPRING_PROFILES_ACTIVE", "value":"'test'"}]' ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - cat $(echo "$TEMPLATE_FILE")
            - echo $(aws ecs register-task-definition --region us-east-1 --cli-input-json file://$TEMPLATE_FILE)
      - step:
          name: Update the aws service
          deployment: test
          script:
            - export AWS_TASK_DEFINITION=$(aws ecs describe-task-definition --region us-east-1 --task-definition sandbox-manager-api-test)
            - echo $AWS_TASK_DEFINITION
            - export AWS_TASK_VERSION=$(echo $AWS_TASK_DEFINITION | jq --raw-output '.taskDefinition.revision')
            - echo $AWS_TASK_VERSION
            - echo $(aws ecs update-service --region us-east-1 --cluster sandbox-test --service sandbox-manager-api-test --task-definition sandbox-manager-api-test:${AWS_TASK_VERSION})
    master:
      - step:
          name: build the source code
          caches:
            - maven
          script:
            # Deploy to maven central
            - openssl aes-256-cbc -pass pass:$OPENSSL_PWD -in private-key.gpg.enc -out private-key.gpg -d
            - gpg --batch --import private-key.gpg
            - mvn -V -B -s settings.xml deploy -P DEPLOY,ossrh
            - rm target/*-sources.jar
            - rm target/*-javadoc.jar
          artifacts:
            - target/*.jar
      - step:
          name: build docker and upload to docker hub
          script:
            - export DOCKER_PROJECT_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            - echo $DOCKER_PROJECT_VERSION
            - export DOCKER_IMAGE_COORDINATES="hspconsortium/sandbox-manager-api:${DOCKER_PROJECT_VERSION}"
            - echo $DOCKER_IMAGE_COORDINATES
            - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
            - docker build -t $DOCKER_IMAGE_COORDINATES .
            - docker push $DOCKER_IMAGE_COORDINATES
      - step:
          name: update the aws task definition
          script:
            - export TEMPLATE_FILE="aws/task-definition-prod.json"
            - export DOCKER_PROJECT_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            - export DOCKER_IMAGE_COORDINATES="hspconsortium/sandbox-manager-api:${DOCKER_PROJECT_VERSION}"
            - jq ".containerDefinitions[0].image = \"$DOCKER_IMAGE_COORDINATES\"" ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - jq '.containerDefinitions[0].environment += [{"name":"JASYPT_ENCRYPTOR_PASSWORD", "value":"'$ENC_PW_PROD'"}]' ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - jq '.containerDefinitions[0].environment += [{"name":"SPRING_PROFILES_ACTIVE", "value":"'prod'"}]' ${TEMPLATE_FILE} > tmp.json && mv tmp.json ${TEMPLATE_FILE}
            - cat $(echo "$TEMPLATE_FILE")
            - echo $(aws ecs register-task-definition --region us-east-1 --cli-input-json file://$TEMPLATE_FILE)
      - step:
          name: Update the aws service
          deployment: production
          trigger: manual
          script:
            - export AWS_TASK_DEFINITION=$(aws ecs describe-task-definition --region us-east-1 --task-definition sandbox-manager-api-prod)
            - echo $AWS_TASK_DEFINITION
            - export AWS_TASK_VERSION=$(echo $AWS_TASK_DEFINITION | jq --raw-output '.taskDefinition.revision')
            - echo $AWS_TASK_VERSION
            - echo $(aws ecs update-service --region us-east-1 --cluster sandbox-prod --service sandbox-manager-api-prod --task-definition sandbox-manager-api-prod:${AWS_TASK_VERSION})
    feature/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    release/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
    hotfix/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify
options:
  docker: true