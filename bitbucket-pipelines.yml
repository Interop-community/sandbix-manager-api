# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image: hspconsortium/hspc-ubuntu-base
clone:           # the 'clone' section
  depth: 1       # the depth, in this case the clone will contain last one commits

pipelines:
  default:
    - step:
        script:
          - echo "Please use a GitFlow branch"
          - exit 1;
  branches:
    develop:
      - step:
          name: build jar and upload to nexus
          caches:
            - maven
          script:
            - mvn -V -B -s settings.xml deploy -P DEPLOY-HSPC,hspc-nexus
            # clear out the other jar files
            - rm target/*-sources.jar
            - rm target/*-javadoc.jar
            - . ci/build_set_env.sh test 12000 500
          artifacts:
            - set_env.sh
            - target/*.jar
      - step:
          name: build docker and upload to docker hub
          script:
            - . set_env.sh
            - echo $IMAGE_COORDINATES
            # build docker image and push
            - docker login -u $DOCKER_ID -p $DOCKER_PASSWORD
            - docker build -t $IMAGE_COORDINATES .
            - docker push $IMAGE_COORDINATES
      - step:
          name: AUTOMATICALLY update the aws test service
          script:
            - . set_env.sh
            - . ci/build_container_definition.sh $ENC_PW_TEST
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat ci/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-test --service sandbox-manager-api-service --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
    master:
      - step:
          name: build jar and upload to nexus
          caches:
            - maven
          script:
            - mvn -V -B -s settings.xml deploy -P DEPLOY-HSPC,hspc-nexus
            # clear out the other jar files
            - rm target/*-sources.jar
            - rm target/*-javadoc.jar
            - . ci/build_set_env.sh prod 12000 500
          artifacts:
            - set_env.sh
            - target/*.jar
      - step:
          name: build docker and upload to docker hub
          script:
            - . set_env.sh
            - echo $IMAGE_COORDINATES
            # build docker image and push
            - docker login -u $DOCKER_ID -p $DOCKER_PASSWORD
            - docker build -t $IMAGE_COORDINATES .
            - docker push $IMAGE_COORDINATES
      - step:
          name: AUTOMATICALLY update the aws prod service
          script:
            - . set_env.sh
            - . ci/build_container_definition.sh $ENC_PW_PROD
            # register the ECS task definition and capture the version
            - export TASK_VERSION=$(aws ecs register-task-definition --family "$AWS_CONTAINER_NAME" --container-definitions $(cat ci/container-definitions.json | jq -c '.')  | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition - $AWS_CONTAINER_NAME:$TASK_VERSION"
            # update the service to use the latest task definition
            - aws ecs update-service --cluster hspc-prod --service hspc-sandbox-manager-api-prod-service --task-definition $AWS_CONTAINER_NAME:$TASK_VERSION
    feature/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify -s settings.xml
    release/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify -s settings.xml
    hotfix/*:
      - step:
          caches:
            - maven
          script:
            - mvn -B verify -s settings.xml


options:
  docker: true